# ########################################
# Emotion recognition from speech using wav2vec2
# For more wav2vec2/HuBERT results, please see https://arxiv.org/pdf/2111.02735.pdf
#  * Authors: Yingzhi WANG
# ########################################

# Seed needs to be set at top of yaml, before objects with parameters are made
seed: 19
__set_seed: !apply:torch.manual_seed [!ref <seed>]

# Dataset will be downloaded to the `data_original`
data_folder: /gpfsscratch/rech/nou/uzn19yk/IEMOCAP/IEMOCAP_full_release/ # e.g., /path/to/IEMOCAP_full_release
output_folder: !ref /gpfsscratch/rech/nou/uzn19yk/results/fbanks2/200stepscremaIEMOCAP/<seed>

save_folder: !ref <output_folder>/save
train_log: !ref <output_folder>/train_log.txt

# URL for the wav2vec2 model, you can change to benchmark diffrenet models
# Important: we use wav2vec2 base and not the fine-tuned one with ASR task
# This allow you to have ~4% improvment
wav2vec2_hub: /gpfsstore/rech/nou/uzn19yk/distilhubert/

# different speakers for train, valid and test sets
different_speakers: False
# which speaker is used for test set, value from 1 to 10
test_spk_id: 1

# Path where data manifest files will be stored
#
csv_folder: csvs/
# Path where data manifest files will be stored
train_annotation: !ref <csv_folder>/train.json
valid_annotation: !ref <csv_folder>/valid.json
test_annotation: /gpfsscratch/rech/nou/uzn19yk/emotion_foreign/asvp.json



# The train logger writes training statistics to a file, as well as stdout.
train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
    save_file: !ref <train_log>

ckpt_interval_minutes: 15 # save checkpoint every N min

# Training parameters
number_of_epochs: 30
batch_size: 4
lr: 0.00001
lr_wav2vec2: 0.00001

#freeze all wav2vec2
freeze_wav2vec2: True
#set to true to freeze the CONV part of the wav2vec2 model
# We see an improvement of 2% with freezing CNNs
freeze_wav2vec2_conv: True

# Model parameters
encoder_dim: 240

# Number of emotions
out_n_neurons: 4 # (anger, happiness, sadness, neutral)

dataloader_options:
    batch_size: !ref <batch_size>
    shuffle: True
    num_workers: 2  # 2 on linux but 0 works on windows
    drop_last: False
compute_features: !new:speechbrain.lobes.features.Fbank
    n_mels: 80
    deltas: True
mean_var_norm: !new:speechbrain.processing.features.InputNormalization
    norm_type: sentence
    std_norm: False
embedding_model: !new:speechbrain.lobes.models.ECAPA_TDNN.ECAPA_TDNN
    input_size: !ref <encoder_dim>
    channels: [512, 512, 512, 512, 1536]
    kernel_sizes: [5, 3, 3, 3, 1]
    dilations: [1, 2, 3, 4, 1]
    attention_channels: 64
    lin_neurons: 96

classifier: !new:speechbrain.lobes.models.ECAPA_TDNN.Classifier
    input_size: 96
    out_neurons: !ref <out_n_neurons>



epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter
    limit: !ref <number_of_epochs>

modules:
    compute_features: !ref <compute_features>
    mean_var_norm: !ref <mean_var_norm>
    embedding_model: !ref <embedding_model>
    classifier: !ref <classifier>

model: !new:torch.nn.ModuleList
    - [ !ref <classifier>, !ref <embedding_model>]

log_softmax: !new:speechbrain.nnet.activations.Softmax
    apply_log: True

compute_cost: !name:speechbrain.nnet.losses.nll_loss

error_stats: !name:speechbrain.utils.metric_stats.MetricStats
    metric: !name:speechbrain.nnet.losses.classification_error
        reduction: batch

opt_class: !name:torch.optim.Adam
    lr: !ref <lr>

wav2vec2_opt_class: !name:torch.optim.Adam
    lr: !ref <lr_wav2vec2>

lr_annealing: !new:speechbrain.nnet.schedulers.NewBobScheduler
    initial_value: !ref <lr>
    improvement_threshold: 0.0025
    annealing_factor: 0.9
    patient: 0

lr_annealing_wav2vec2: !new:speechbrain.nnet.schedulers.NewBobScheduler
    initial_value: !ref <lr_wav2vec2>
    improvement_threshold: 0.0025
    annealing_factor: 0.9

checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
    checkpoints_dir: !ref <save_folder>
    recoverables:
        model: !ref <model>
        lr_annealing_output: !ref <lr_annealing>
        lr_annealing_wav2vec2: !ref <lr_annealing_wav2vec2>
        counter: !ref <epoch_counter>
        normalizer: !ref <mean_var_norm>
